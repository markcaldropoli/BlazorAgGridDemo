@page "/weather"
@using BlazorAgGrid.Grid
@inject IJSRuntime JS

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="content-wrapper">
        <AgGrid Theme="ag-theme-alpine" Data="@forecasts" Height="100%" Width="100%" Pageable="true" PageSize="20">
            <GridColumn Field="Date" HeaderName="Date" Filter="ColumnFilter.agSetColumnFilter" />
            <GridColumn Field="TemperatureC" HeaderName="Temperature C" Filter="ColumnFilter.agNumberColumnFilter" />
            <GridColumn Field="TemperatureF" HeaderName="Temperature F" Filter="ColumnFilter.agNumberColumnFilter" />
            <GridColumn Field="Summary" HeaderName="Summary" Filter="ColumnFilter.agSetColumnFilter" Editable="true" />
        </AgGrid>
    </div>
}

@code {
    private List<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        forecasts = Enumerable.Range(1, 5_000).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToList();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}